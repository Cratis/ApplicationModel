/*---------------------------------------------------------------------------------------------
 *  **DO NOT EDIT** - This file is an automatically generated file.
 *--------------------------------------------------------------------------------------------*/

/* eslint-disable sort-imports */
// eslint-disable-next-line header/header
{{#if IsEnumerable}}
import { QueryFor, QueryResultWithState, Sorting, SortingActions, SortingActionsForQuery, Paging } from '@cratis/applications/queries';
import { useQuery, useQueryWithPaging, PerformQuery, SetSorting, SetPage, SetPageSize } from '@cratis/applications.react/queries';
{{else}}
import { QueryFor, QueryResultWithState } from '@cratis/applications/queries';
import { useQuery, PerformQuery } from '@cratis/applications.react/queries';
{{/if}}
{{#Imports}}
import { {{Type}} } from '{{Module}}';
{{/Imports}}
import Handlebars from 'handlebars';

const routeTemplate = Handlebars.compile('{{RouteTemplate}}');

{{#if IsEnumerable}}
class {{Name}}SortBy {
{{#Properties}}
    private _{{camelCase Name}}: SortingActionsForQuery<{{../Model}}[]>;
{{/Properties}}

    constructor(readonly query: {{Name}}) {
{{#Properties}}
        this._{{camelCase Name}} = new SortingActionsForQuery<{{../Model}}[]>('{{camelCase Name}}', query);
{{/Properties}}
    }

{{#Properties}}
    get {{camelCase Name}}(): SortingActionsForQuery<{{../Model}}[]> {
        return this._{{camelCase Name}};
    }
{{/Properties}}
}

class {{Name}}SortByWithoutQuery {
{{#Properties}}
    private _{{camelCase Name}}: SortingActions  = new SortingActions('{{camelCase Name}}');
{{/Properties}}

{{#Properties}}
    get {{camelCase Name}}(): SortingActions {
        return this._{{camelCase Name}};
    }
{{/Properties}}
}
{{/if}}

{{#if Arguments.[0]}}
export interface {{Name}}Arguments {
    {{#Arguments}}
    {{#if IsOptional}}
    {{camelcase Name}}?: {{Type}};
    {{else}}
    {{camelcase Name}}: {{Type}};
    {{/if}}
    {{/Arguments}}
}

{{#if IsEnumerable}}
export class {{Name}} extends QueryFor<{{Model}}[], {{Name}}Arguments> {
{{else}}
export class {{Name}} extends QueryFor<{{Model}}, {{Name}}Arguments> {
{{/if}}
{{else}}
{{#if IsEnumerable}}
export class {{Name}} extends QueryFor<{{Model}}[]> {
{{else}}
export class {{Name}} extends QueryFor<{{Model}}> {
{{/if}}
{{/if}}
    readonly route: string = '{{{Route}}}';
    readonly routeTemplate: Handlebars.TemplateDelegate = routeTemplate;
{{#if IsEnumerable}}
    readonly defaultValue: {{Model}}[] = [];
    private readonly _sortBy: {{Name}}SortBy;
    private static readonly _sortBy: {{Name}}SortByWithoutQuery = new {{Name}}SortByWithoutQuery();
{{else}}
    readonly defaultValue: {{Model}} = {} as any;
{{/if}}

    constructor() {
        super({{Constructor}}, {{lowercase IsEnumerable}});
{{#if IsEnumerable}}        
        this._sortBy = new {{Name}}SortBy(this);
{{/if}}
    }

    get requiredRequestArguments(): string[] {
        return [
            {{#RequiredArguments}}
            '{{camelcase Name}}',
            {{/RequiredArguments}}
        ];
    }

{{#if IsEnumerable}}
    get sortBy(): {{Name}}SortBy {
        return this._sortBy;
    }

    static get sortBy(): {{Name}}SortByWithoutQuery {
        return this._sortBy;
    }
{{/if}}

{{#if Arguments.[0]}}
{{#if IsEnumerable}}
    static use(args?: {{Name}}Arguments, sorting?: Sorting): [QueryResultWithState<{{Model}}[]>, PerformQuery<{{Name}}Arguments>, SetSorting] {
        return useQuery<{{Model}}[], {{Name}}, {{Name}}Arguments>({{Name}}, args, sorting);
    }

    static useWithPaging(pageSize: number, args?: {{Name}}Arguments, sorting?: Sorting): [QueryResultWithState<{{Model}}[]>, PerformQuery, SetSorting, SetPage, SetPageSize] {
        return useQueryWithPaging<{{Model}}[], {{Name}}>({{Name}}, new Paging(0, pageSize), args, sorting);
    }
{{else}}
    static use(args?: {{Name}}Arguments): [QueryResultWithState<{{Model}}>, PerformQuery<{{Name}}Arguments>] {
        const [result, perform] = useQuery<{{Model}}, {{Name}}, {{Name}}Arguments>({{Name}}, args);
        return [result, perform];
    }
{{/if}}
{{else}}
{{#if IsEnumerable}}
    static use(sorting?: Sorting): [QueryResultWithState<{{Model}}[]>, PerformQuery, SetSorting] {
        return useQuery<{{Model}}[], {{Name}}>({{Name}}, undefined, sorting);
    }

    static useWithPaging(pageSize: number, sorting?: Sorting): [QueryResultWithState<{{Model}}[]>, PerformQuery, SetSorting, SetPage, SetPageSize] {
        return useQueryWithPaging<{{Model}}[], {{Name}}>({{Name}}, new Paging(0, pageSize), undefined, sorting);
    }
{{else}}
    static use(): [QueryResultWithState<{{Model}}>, PerformQuery] {
        const [result, perform] = useQuery<{{Model}}, {{Name}}>({{Name}});
        return [result, perform];
    }
{{/if}}
{{/if}}
}
